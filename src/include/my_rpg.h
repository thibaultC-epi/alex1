/*
** EPITECH PROJECT, 2020
** graph
** File description:
** main
*/

#include "include.h"

void set_window(game_t *gm);
void pollevent_menu(game_t *gm);
void scene(game_t *gm);
void button_clicked(game_t *gm);
void button_click(struct game *gm);
void button_hover(game_t *gm);
void button_hover_p(game_t *gm);
void button_hover_o(game_t *gm);
void button_hover_t(game_t *gm);
void button_hover_q(game_t *gm);
void button_click_p(game_t *gm);
void button_click_o(game_t *gm);
void button_click_t(game_t *gm);
void button_click_q(game_t *gm);
void menu(game_t *gm);
void set_menu(game_t *gm);
void init_menu(game_t *gm);
void init_menu2(game_t *gm);
void set_text_menu(game_t *gm);
void set_text_home_title(struct game *gm);
void set_text_home_play(struct game *gm);
void set_text_home_option(struct game *gm);
void set_text_home_tuto(struct game *gm);
void set_text_home_quit(struct game *gm);
void init_option(game_t *gm);
void init_option_texte(game_t *gm);
void init_option_texte2(game_t *gm);
void init_sound(game_t *gm);
void init_lang(game_t *gm);
void init_lang2(game_t *gm);
void init_reg_vol(game_t *gm);
void init_opt(game_t *gm);
void mute_gestion(game_t *gm);
void scene_mute(game_t *gm);
void poll_event_option(game_t *gm);
void poll_event_option2(game_t *gm);
void poll_event_option3(game_t *gm);
void cal(game_t *gm);
void mute_sfx(game_t *gm);
void mute_music(game_t *gm);
void unmute_music(game_t *gm);
void unmute_sfx(game_t *gm);
void print_op(game_t *gm);
void print_lang(game_t *gm);
void print_back_sound(game_t *gm);
void print_text_option(game_t *gm);
void option(game_t *gm);
void print_all_op(game_t *gm);
void retr_menu(game_t *gm);
void init_set_lang(game_t *gm);
void click_fr(game_t *gm);
void click_en(game_t *gm);
void click_es(game_t *gm);
void lang_print(game_t *gm);
void gestion_lang(game_t *gm);
void lang_fr(game_t *gm);
void lang_en(game_t *gm);
void lang_es(game_t *gm);
void final_boss(struct game *gm);
void init_final(game_t *game);
void lang_fr_menu(game_t *gm);
void lang_en_menu(game_t *gm);
void lang_es_menu(game_t *gm);
void set_lang_menu(game_t *gm);
void retr_yellow(game_t *gm);
void interface(game_t *gm);
void init_window(game_t *gm);
void inventory(game_t *gm);
void init_inventory(game_t *gm);
void init_window(game_t *gm);
void init_play(game_t *gm);
void play(game_t *gm);
void scene(game_t *gm);
void init_space_map(game_t *gm);
void space_map(game_t *gm);
void init_pos_ship(game_t *gm);
void set_direction_ship(game_t *gm);
void moove_ship(game_t *gm);
void up_moove_map(game_t *gm);
void down_moove_map(game_t *gm);
void right_moove_map(game_t *gm);
void left_moove_map(game_t *gm);
void moove_up_ship(game_t *gm);
void moove_down_ship(game_t *gm);
void moove_right_ship(game_t *gm);
void moove_left_ship(game_t *gm);
void init_text_planet(game_t *gm);
void anime_planet(game_t *gm);
void anime_blue_planet(game_t *gm);
void anime_marron_planet(game_t *gm);
void new_position_blue_planet(game_t *gm, int i);
void new_position_marron_planet(game_t *gm, int i);
void check_if_planet_visible(game_t *gm, int i);
void new_position_stars_planet(game_t *gm, int i);
void new_position_yellow_planet(game_t *gm, int i);
void anime_stars_planet(game_t *gm);
void anime_yellow_planet(game_t *gm);
void set_vol1(game_t *gm);
void set_vol2(game_t *gm);
void set_vol3(game_t *gm);
void set_vol4(game_t *gm);
void print_vol(game_t *gm);
void print_vol2(game_t *gm);
void init_sprite_c(game_t *gm);
void custom(game_t *gm);
void poll_event_custom(game_t *gm);
void init_custom(game_t *gm);
void init_sprite_chara(game_t *gm);
void init_sprite_ship(game_t *gm);
void set_ship(game_t *gm);
void set_chara(game_t *gm);
void gestion_click(game_t *gm);
void print_f_yellow(game_t *gm);
void retun_menu(game_t *gm);
void retun_y_cus(game_t *gm);
void click_ok(game_t *gm);
void scale_ok(game_t *gm);
void p_lang_f(game_t *gm);
void p_lang_es(game_t *gm);
void p_lang_en(game_t *gm);
void print_lang_cus(game_t *gm);
void collision_planet(game_t *gm, int i);
void left_direction_ship(game_t *gm);
void down_direction_ship(game_t *gm);
void right_direction_ship(game_t *gm);
void up_direction_ship(game_t *gm);
void init_collision(game_t *gm);
void collision_right(game_t *gm, int i);
void collision_left(game_t *gm, int i);
void collision_bottom(game_t *gm, int i);
void collision_top(game_t *gm, int i);
void collision_planet2(game_t *gm, int i);
void print_text_planet(game_t *gm, int i);
void loading_planet(game_t *gm);
void print_text_planet_w(game_t *gm, int i);
void init_load(game_t *gm);
void loading_planet2(game_t *gm);
void story(game_t *gm);
void initialisation_s(game_t *gm);
void init_story(game_t *gm);
void initialisation2_s(game_t *gm);
void change_y_b(game_t *gm);
void gestion_click_story(game_t *gm);
void scale_skikp(game_t *gm);
void gestion_lang_story(game_t *gm);
void echap_p(game_t *gm);
void init_e(game_t *gm);
void init_echap(game_t *gm);
void press_echap(game_t *gm);
void tuto(game_t *gm);
void init_tuto(game_t *gm);
void init_e2(game_t *gm);
void mous_resume(game_t *gm);
void mous_menu(game_t *gm);
void click_resume(game_t *gm);
void click_e_menu(game_t *gm);
void mous_quit(game_t *gm);
void click_quit(game_t *gm);
void initialisation_tu(game_t *gm);
void initialisation_tu2(game_t *gm);
void set_mous_y(game_t *gm);
void set_click_tuto(game_t *gm);
void t_lang_f(game_t *gm);
void t_lang_en(game_t *gm);
void t_lang_es(game_t *gm);
void print_lang_tuto(game_t *gm);

window_t *struct_fill_window(void);
menu_t *struct_fill_menu(void);
text_but_menu_t *struct_fill_text_but_menu(void);
but_menu_t *struct_fill_but_menu(void);
title_t *struct_title (void);
game_t *struct_fill_game(void);
option_t *opt1(void);
text_op_t *text1(void);
sound_t *sound1(void);
langue_t *langue1(void);
vol_t *vol1(void);
langue2_t *langue2(void);
final_t *struct_fill_final(void);
inventory_t *struct_fill_inventory(void);
game_t *struct_fill_game(void);
window_t *struct_fill_window(void);
play_t *struct_fill_play(void);
space_map_t *struct_fill_space_map(void);
v_space_map_t *struct_fill_v_space_map4(v_space_map_t *s_map, int i);
v_space_map_t *struct_fill_v_space_map9(v_space_map_t *s_map, int i);
v_space_map_t *struct_fill_v_space_map(void);
custom_t *cust1(void);
charactere_t *char1(void);
ship_t *ship1(void);
arrow_t *arrow(void);
story_t *story1(void);
text_story_t *t_story1(void);
b_story_t *b_story1(void);
echap_t *echap1(void);
tuto_t *tuto1(void);
collision_t *struct_fill_colli(void);
loading_t *struct_fill_loading(void);
tuto_t *tuto1(void);
tuto2_t *tuto2(void);
stats_t *struct_fill_stats(void);

void struct_fill_final2(final_t *final);
void struct_fill_final3(final_t *final);
void init_final_character_cadre(game_t *game);
void init_final_middle_cadre(game_t *game);
void init_inside_middle_cadre(game_t *game);
void final_button_hover(game_t *gm);
int final_button_hover_q(game_t *gm);
void pollevent_final(game_t *gm);
void draw_ui(game_t *gm);
void draw_final_inside_middle_cadre(game_t *gm);
void draw_character_cadre(game_t *gm);
void struct_fill_character(final_t *final);
void struct_fill_stats_character(final_t *final);
void init_character_jauge(game_t *game);
void draw(game_t *gm);
void draw_character_stats(game_t *gm);
void struct_fill_text(final_t *final);
void init_character_name(struct game *gm);
void init_character_life(struct game *gm);
void init_character_img(game_t *game);
void draw_character_img(game_t *gm);
void init_text_attack(game_t *gm);
void init_text_defender(game_t *gm);
void init_text_item(game_t *gm);
void init_text_heal(game_t *gm);
void draw_action_text(game_t *gm);
void struct_fill_mimine(final_t *final);
void press_attack(game_t *gm);
void press_def(game_t *gm);
void press_objet(game_t *gm);
void press_soin(game_t *gm);
void move_pointer_attack(game_t *gm);
void move_pointer_def(game_t *gm);
void move_pointer_item(game_t *gm);
void move_pointer_soin(game_t *gm);
void move_pointer(game_t *gm);
char *my_itoa(int nb);
void action_boss(game_t *gm);
void game_controler(game_t *gm);
void draw_win(game_t *gm);
void struct_fill_particles(final_t *final);
void init_particles(game_t *gm);
void draw_particles(game_t *gm);
void start_particles(game_t *gm);
void struct_fill_particles(final_t *final);
void draw_particles_hero(game_t *gm);
void start_particles_hero(game_t *gm);

void direction_ship_event(game_t *gm);
void mooving_on_map(game_t *gm);


void character_inv(game_t *gm);
void anime_player_down(game_t *gm);
void moove_down(game_t *gm);
void anime_player_left(game_t *gm);
void anime_player_right(game_t *gm);
void anime_player_up(game_t *gm);
void moove_left(game_t *gm);
void moove_right(game_t *gm);
void moove_up(game_t *gm);
void moove_down_map(game_t *gm);
void moove_left_map(game_t *gm);
void moove_right_map(game_t *gm);
void moove_up_map(game_t *gm);
void moove_down_player(game_t *gm);
void moove_left_player(game_t *gm);
void moove_right_player(game_t *gm);
void moove_up_player(game_t *gm);
int my_getnbr(char *str);
void set_map(game_t *gm);
void creation_sprite(game_t *gm);
void init_stage_v(game_t *gm);
void init_stage1_v(game_t *gm);
void init_stage2_v(game_t *gm);
void init_stage3_v(game_t *gm);
void use_map_1(game_t *gm, int i, int j, int p);
void use_map_2(game_t *gm, int i, int j, int p);
void use_map_3(game_t *gm, int i, int j, int p);
void mooving_on_map_ear(game_t *gm);
void mooving_map_right(game_t *gm);
void mooving_map_left(game_t *gm);
void mooving_map_down(game_t *gm);
void mooving_map_up(game_t *gm);
void init_no_colision(game_t *gm);
void new_map_visual(game_t *gm);
void check_if_colision_up(game_t *gm);
void fill_tab_map(game_t *gm);
void check_if_colision_down(game_t *gm);
void check_if_colision_left(game_t *gm);
void check_if_colision_right(game_t *gm);
void fill_obs_map(game_t *gm);
void play_ear(game_t *gm);

map_t *struct_fill_map(void);
earth_t *struct_fill_earth(void);